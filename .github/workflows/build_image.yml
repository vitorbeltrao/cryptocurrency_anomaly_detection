name: Cypress Docker Push
on: 
  workflow_run:
    workflows: ['Python application']
    types:
      - completed
  
jobs:
  Cypress-Test:

    name: Build Docker Image
    runs-on: ubuntu-latest  

    steps:  
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Build Arguments
        run: |
          echo "BUCKET_NAME=${{ secrets.BUCKET_NAME }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "ENDPOINT_NAME=${{ secrets.ENDPOINT_NAME }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "USER=${{ secrets.USER }}" >> $GITHUB_ENV
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> $GITHUB_ENV
          echo "DW_SCHEMA_TO_CREATE=${{ secrets.DW_SCHEMA_TO_CREATE }}" >> $GITHUB_ENV
          echo "DW_TEMP_SCHEMA_TO_CREATE=${{ secrets.DW_TEMP_SCHEMA_TO_CREATE }}" >> $GITHUB_ENV
          echo "PROCESSED_TABLE_NAME=${{ secrets.PROCESSED_TABLE_NAME }}" >> $GITHUB_ENV
          echo "FROM=${{ secrets.FROM }}" >> $GITHUB_ENV
          echo "TO=${{ secrets.TO }}" >> $GITHUB_ENV
          echo "EMAIL_PASS=${{ secrets.PASS }}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the tagged docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build --build-arg BUCKET_NAME=$BUCKET_NAME --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg AWS_REGION=$AWS_REGION --build-arg ENDPOINT_NAME=$ENDPOINT_NAME --build-arg PORT=$PORT --build-arg DB_NAME=$DB_NAME --build-arg USER=$USER --build-arg PASSWORD=$PASSWORD --build-arg DW_SCHEMA_TO_CREATE=$DW_SCHEMA_TO_CREATE --build-arg DW_TEMP_SCHEMA_TO_CREATE=$DW_TEMP_SCHEMA_TO_CREATE --build-arg PROCESSED_TABLE_NAME=$PROCESSED_TABLE_NAME --build-arg FROM=$FROM --build-arg TO=$TO --build-arg EMAIL_PASS=$EMAIL_PASS -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG