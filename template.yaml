AWSTemplateFormatVersion: '2010-09-09'
Description: Template para criar uma instancia de bucket S3, um rds postgres e um servico Fargate.

Resources:

  MyDBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: MySecretForAppAnomalyDetection
      GenerateSecretString:
        SecretStringTemplate: '{"username": "user_admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\;+% '

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: cryptocurrency-anomaly-detection

  MyDBInstance:
    Type: 'AWS::RDS::DBInstance'
    DependsOn:
      - MyDBSecret
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t3.micro # free tier
      Engine: postgres
      EngineVersion: '14.7'
      MasterUsername: '{{resolve:secretsmanager:MySecretForAppAnomalyDetection:SecretString:username}}'
      MasterUserPassword: '{{resolve:secretsmanager:MySecretForAppAnomalyDetection:SecretString:password}}' # Referencing the secret value
      DBInstanceIdentifier: marina-db
      StorageType: gp2
      MultiAZ: false
      DBParameterGroupName: !Ref MyDBParameterGroup
    
  MyDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Family: postgres14
      Description: My db parameter group
      Parameters:
        # Enable logical replication
        rds.logical_replication: '1'
        # Load shared libraries during database initialization
        shared_preload_libraries: 'pg_stat_statements,pglogical'

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: AnomalyDetectionCluster
      CapacityProviders:
      - FARGATE
      - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FullAccessAdmin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: '413301752162.dkr.ecr.us-east-1.amazonaws.com/crypto_anomaly:latest'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/fargate-task-definition
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
          Name: sample-fargate-app
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Command: ["python", "main.py"]  # Comando a ser executado dentro do contÃªiner
      Cpu: "256"
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      Family: task-definition-cfn
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX

  ECSService: 
    Type: AWS::ECS::Service
    Properties: 
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDefinition 
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - subnet-0633631b68624296b
            - subnet-0e5244248d864b2f0
          SecurityGroups:
            - sg-08a63fd999e3f4d82