AWSTemplateFormatVersion: '2010-09-09'
Description: Template para criar uma instancia de bucket S3, um rds postgres e um servico Fargate.

Resources:

  MyDBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: MySecretForAppAnomalyDetection
      GenerateSecretString:
        SecretStringTemplate: '{"username": "user_admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\;+% '

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: cryptocurrency-anomaly-detection

  MyDBInstance:
    Type: 'AWS::RDS::DBInstance'
    DependsOn:
      - MyDBSecret
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t3.micro # free tier
      Engine: postgres
      EngineVersion: '14.7'
      MasterUsername: '{{resolve:secretsmanager:MySecretForAppAnomalyDetection:SecretString:username}}'
      MasterUserPassword: '{{resolve:secretsmanager:MySecretForAppAnomalyDetection:SecretString:password}}' # Referencing the secret value
      DBInstanceIdentifier: marina-db
      StorageType: gp2
      MultiAZ: false
      DBParameterGroupName: !Ref MyDBParameterGroup
    
  MyDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Family: postgres14
      Description: My db parameter group
      Parameters:
        # Enable logical replication
        rds.logical_replication: '1'
        # Load shared libraries during database initialization
        shared_preload_libraries: 'pg_stat_statements,pglogical'

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: AnomalyDetectionCluster
      CapacityProviders:
      - FARGATE
      - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Command:
            - >-
              /bin/sh -c "echo '<html> <head> <title>Amazon ECS Sample
              App</title> <style>body {margin-top: 40px; background-color:
              #333;} </style> </head><body> <div
              style=color:white;text-align:center> <h1>Amazon ECS Sample
              App</h1> <h2>Congratulations!</h2> <p>Your application is now
              running on a container in Amazon ECS.</p> </div></body></html>' > 
              /usr/local/apache2/htdocs/index.html && httpd-foreground"
          EntryPoint:
            - sh
            - '-c'
          Essential: true
          Image: 'httpd:2.4'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/fargate-task-definition
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
          Name: sample-fargate-app
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
      Cpu: 256
      ExecutionRoleArn: 'arn:aws:iam::413301752162:role/ECSAnomalyDetection'
      Family: task-definition-cfn
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        OperatingSystemFamily: LINUX

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: cfn-service
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          # SecurityGroups:
          #   - !Ref InstanceSecurityGroup
          Subnets:
            - subnet-0633631b68624296b
      TaskDefinition: !Ref ECSTaskDefinition
